package main

import (
	"fmt"
	"strings"
)

const debug = false

const (
	OpcodeAdd                = 1
	OpcodeMultiply           = 2
	OpcodeGetInput           = 3
	OpcodeWriteOutput        = 4
	OpcodeJumpIfTrue         = 5
	OpcodeJumpIfFalse        = 6
	OpcodeLessThan           = 7
	OpcodeEquals             = 8
	OpcodeAdjustRelativeBase = 9
	OpcodeHalt               = 99
)

const (
	InputModePosition  = 0
	InputModeImmidiate = 1
	InputModeRelative  = 2
)

type Process struct {
	memory        []int
	position      int
	output        []int
	input         []int
	inputPointer  int
	outputPointer int
	relativeBase  int

	halted bool
}

func NewProcess(code []int, input []int) *Process {
	memory := make([]int, len(code)+900000)

	copy(memory, code)

	return &Process{
		memory:       memory,
		position:     0,
		input:        input,
		inputPointer: 0,
		halted:       false,
	}
}

//
// Read & write to program memory
//
func (p *Process) Read(position int) (int, error) {
	if position >= len(p.memory) || position < 0 {
		return 0, fmt.Errorf("Index %d out of range", position)
	}

	return p.memory[position], nil
}

func (p *Process) Write(position int, value int, mode int) error {
	if position >= len(p.memory) || position < 0 {
		return fmt.Errorf("Index out of range")
	}

	switch mode {
	case InputModePosition:
		if debug {
			fmt.Printf(" A %d = %d", p.memory[position], value)
		}
		p.memory[p.memory[position]] = value
	case InputModeRelative:
		if debug {
			fmt.Printf(" R %d = %d", p.memory[position]+p.relativeBase, value)
		}
		p.memory[p.memory[position]+p.relativeBase] = value
	}

	return nil
}

func (p *Process) DumpMemory() {
	for i, v := range p.memory {
		if i == p.position {
			fmt.Printf("[%d] ", v)
		} else {
			fmt.Printf("%d ", v)
		}
	}

	fmt.Print("\n")
}

func (p *Process) LoadParam(position int, mode int) (int, error) {
	switch mode {
	case InputModePosition:
		pointer, err := p.Read(position)
		if err != nil {
			return 0, err
		}

		value, err := p.Read(pointer)
		if err != nil {
			return 0, err
		}

		return value, nil
	case InputModeImmidiate:
		value, err := p.Read(position)
		if err != nil {
			return 0, err
		}

		return value, nil

	case InputModeRelative:
		pointer, err := p.Read(position)
		if err != nil {
			return 0, err
		}

		value, err := p.Read(pointer + p.relativeBase)
		if err != nil {
			return 0, err
		}

		return value, nil
	default:
		return 0, fmt.Errorf("Unknonwn input mode")
	}
}

func (p *Process) Debug(name string, length int) {
	if !debug {
		return
	}

	fmt.Printf("%4s ", name)

	mode1 := (p.memory[p.position] / 100) % 10
	mode2 := (p.memory[p.position] / 1000) % 10

	if length >= 1 {
		fmt.Printf(" %10d ", p.memory[p.position+1])
	} else {
		fmt.Printf(" %9s- ", "")
	}

	if length >= 2 {
		fmt.Printf(" %10d ", p.memory[p.position+2])
	} else {
		fmt.Printf(" %9s- ", "")
	}

	if length >= 3 {
		fmt.Printf(" %10d ", p.memory[p.position+3])
	} else {
		fmt.Printf(" %9s- ", "")
	}

	fmt.Printf(" | ")

	if length >= 1 {
		v, _ := p.LoadParam(p.position+1, mode1)
		fmt.Printf(" %16d ", v)
	} else {
		fmt.Printf(" %15s- ", "")
	}

	if length >= 2 {
		v, _ := p.LoadParam(p.position+2, mode2)

		fmt.Printf(" %16d ", v)
	} else {
		fmt.Printf(" %15s- ", "")
	}

	if length >= 3 {
		v, _ := p.Read(p.position + 3)

		fmt.Printf(" %16d ", v)
	} else {
		fmt.Printf(" %15s- ", "")
	}
}

//
// Run program until halt or error.
//
func (p *Process) RunTilInterupt() error {
	operation, err := p.Read(p.position)
	if err != nil {
		return err
	}

	if debug {
		fmt.Println()
		fmt.Printf("%4d (r %4d): ", p.position, p.relativeBase)
	}

	instruction := operation % 100

	param1Mode := (operation / 100) % 10
	param2Mode := (operation / 1000) % 10
	param3Mode := (operation / 10000) % 10

	if debug {
		fmt.Printf("[%d %d %d %2d] ", param1Mode, param2Mode, param3Mode, instruction)
	}

	switch instruction {
	case OpcodeAdd:
		p.Debug("ADD", 3)

		value1, err := p.LoadParam(p.position+1, param1Mode)
		if err != nil {
			return err
		}

		value2, err := p.LoadParam(p.position+2, param2Mode)
		if err != nil {
			return err
		}

		p.Write(p.position+3, value1+value2, param3Mode)

		p.position += 4

		return p.RunTilInterupt()
	case OpcodeMultiply:
		p.Debug("MUL", 3)

		value1, err := p.LoadParam(p.position+1, param1Mode)
		if err != nil {
			return err
		}

		value2, err := p.LoadParam(p.position+2, param2Mode)
		if err != nil {
			return err
		}

		p.Write(p.position+3, value1*value2, param3Mode)

		p.position += 4

		return p.RunTilInterupt()
	case OpcodeGetInput:
		p.Debug("GET", 1)

		if p.inputPointer == len(p.input) {
			// no input, program needs to complete
			// fmt.Printf("Waiting for input")
			return nil
		}

		p.Write(p.position+1, p.input[p.inputPointer], param1Mode)

		p.inputPointer++

		p.position += 2

		return p.RunTilInterupt()
	case OpcodeWriteOutput:
		p.Debug("WRT", 1)

		value, err := p.LoadParam(p.position+1, param1Mode)
		if err != nil {
			return err
		}

		p.output = append(p.output, value)

		p.position += 2

		return p.RunTilInterupt()
	case OpcodeJumpIfTrue:
		p.Debug("JIT", 2)

		value1, err := p.LoadParam(p.position+1, param1Mode)
		if err != nil {
			return err
		}

		if value1 != 0 {
			value2, err := p.LoadParam(p.position+2, param2Mode)
			if err != nil {
				return err
			}

			if debug {
				fmt.Printf("true")
			}

			p.position = value2
		} else {
			if debug {
				fmt.Printf("false")
			}

			p.position += 3
		}
		return p.RunTilInterupt()

	case OpcodeJumpIfFalse:
		p.Debug("JIF", 2)

		value1, err := p.LoadParam(p.position+1, param1Mode)
		if err != nil {
			return err
		}

		if value1 == 0 {
			value2, err := p.LoadParam(p.position+2, param2Mode)
			if err != nil {
				return err
			}

			if debug {
				fmt.Printf("true")
			}

			p.position = value2
		} else {
			if debug {
				fmt.Printf("false ")
			}

			p.position += 3
		}

		return p.RunTilInterupt()
	case OpcodeLessThan:
		p.Debug("LT", 3)

		value1, err := p.LoadParam(p.position+1, param1Mode)
		if err != nil {
			return err
		}

		value2, err := p.LoadParam(p.position+2, param2Mode)
		if err != nil {
			return err
		}

		if value1 < value2 {
			if debug {
				fmt.Printf("true")
			}

			p.Write(p.position+3, 1, param3Mode)
		} else {
			if debug {
				fmt.Printf("false")
			}

			p.Write(p.position+3, 0, param3Mode)
		}

		p.position += 4

		return p.RunTilInterupt()
	case OpcodeEquals:
		p.Debug("EQL", 3)

		value1, err := p.LoadParam(p.position+1, param1Mode)
		if err != nil {
			return err
		}

		value2, err := p.LoadParam(p.position+2, param2Mode)
		if err != nil {
			return err
		}

		if value1 == value2 {
			if debug {
				fmt.Printf("true")
			}

			p.Write(p.position+3, 1, param3Mode)
		} else {
			if debug {
				fmt.Printf("false")
			}

			p.Write(p.position+3, 0, param3Mode)
		}

		p.position += 4

		return p.RunTilInterupt()

	case OpcodeAdjustRelativeBase:
		p.Debug("ADJ", 1)

		value, err := p.LoadParam(p.position+1, param1Mode)
		if err != nil {
			return err
		}

		p.relativeBase += value

		p.position += 2

		return p.RunTilInterupt()
	case OpcodeHalt:
		if debug {
			fmt.Println("halt")
		}

		p.halted = true

		return nil
	default:
		return fmt.Errorf("Unknonwn opcode %d", operation)
	}

	// fmt.Println(operation)
	// fmt.Println(instruction)
	panic("How we got here?")
}

func (p *Process) Run() error {
	for {
		err := p.RunTilInterupt()

		if err != nil {
			return err
		}

		if p.halted {
			return nil
		}
	}
}

func (p *Process) AddInput(val int) {
	p.input = append(p.input, val)
}

func (p *Process) NextOutput() int {
	res := p.output[p.outputPointer]
	p.outputPointer++
	return res
}

// --------------------------------------------

type Pos struct {
	X, Y int
}

func (p *Pos) Add(p2 Pos) {
	p.X += p2.X
	p.Y += p2.Y
}

func (p *Pos) Substract(p2 Pos) {
	p.X -= p2.X
	p.Y -= p2.Y
}

// func check() int {
// }
// const size = 50

// var m = [size][size]byte{}

// func mark(pos Pos, symbol byte) {
// 	m[pos.Y+size/2][pos.X+size/2] = symbol
// }

// func findOxygen(pos Pos, visits Visits, directions []int) (int, Pos) {
// 	1,330,331,332,109,6690,1102,1,1182,16,1102,1,1505,24,102,1,0,570,1006,570,36,1002,571,1,0,1001,570,-1,570,1001,24,1,24,1106,0,18,1008,571,0,571,1001,16,1,16,1008,16,1505,570,1006,570,14,21102,58,1,0,1105,1,786,1006,332,62,99,21101,333,0,1,21102,73,1,0,1105,1,579,1102,0,1,572,1101,0,0,573,3,574,101,1,573,573,1007,574,65,570,1005,570,151,107,67,574,570,1005,570,151,1001,574,-64,574,1002,574,-1,574,1001,572,1,572,1007,572,11,570,1006,570,165,101,1182,572,127,1002,574,1,0,3,574,101,1,573,573,1008,574,10,570,1005,570,189,1008,574,44,570,1006,570,158,1106,0,81,21101,340,0,1,1106,0,177,21102,1,477,1,1106,0,177,21101,0,514,1,21102,1,176,0,1106,0,579,99,21101,0,184,0,1105,1,579,4,574,104,10,99,1007,573,22,570,1006,570,165,1001,572,0,1182,21101,375,0,1,21102,211,1,0,1106,0,579,21101,1182,11,1,21101,222,0,0,1105,1,979,21101,388,0,1,21101,0,233,0,1105,1,579,21101,1182,22,1,21102,1,244,0,1105,1,979,21101,401,0,1,21101,255,0,0,1105,1,579,21101,1182,33,1,21101,0,266,0,1105,1,979,21101,0,414,1,21101,277,0,0,1106,0,579,3,575,1008,575,89,570,1008,575,121,575,1,575,570,575,3,574,1008,574,10,570,1006,570,291,104,10,21101,1182,0,1,21102,1,313,0,1106,0,622,1005,575,327,1101,0,1,575,21101,327,0,0,1106,0,786,4,438,99,0,1,1,6,77,97,105,110,58,10,33,10,69,120,112,101,99,116,101,100,32,102,117,110,99,116,105,111,110,32,110,97,109,101,32,98,117,116,32,103,111,116,58,32,0,12,70,117,110,99,116,105,111,110,32,65,58,10,12,70,117,110,99,116,105,111,110,32,66,58,10,12,70,117,110,99,116,105,111,110,32,67,58,10,23,67,111,110,116,105,110,117,111,117,115,32,118,105,100,101,111,32,102,101,101,100,63,10,0,37,10,69,120,112,101,99,116,101,100,32,82,44,32,76,44,32,111,114,32,100,105,115,116,97,110,99,101,32,98,117,116,32,103,111,116,58,32,36,10,69,120,112,101,99,116,101,100,32,99,111,109,109,97,32,111,114,32,110,101,119,108,105,110,101,32,98,117,116,32,103,111,116,58,32,43,10,68,101,102,105,110,105,116,105,111,110,115,32,109,97,121,32,98,101,32,97,116,32,109,111,115,116,32,50,48,32,99,104,97,114,97,99,116,101,114,115,33,10,94,62,118,60,0,1,0,-1,-1,0,1,0,0,0,0,0,0,1,84,18,0,109,4,2101,0,-3,587,20102,1,0,-1,22101,1,-3,-3,21102,1,0,-2,2208,-2,-1,570,1005,570,617,2201,-3,-2,609,4,0,21201,-2,1,-2,1106,0,597,109,-4,2106,0,0,109,5,2102,1,-4,629,21001,0,0,-2,22101,1,-4,-4,21102,1,0,-3,2208,-3,-2,570,1005,570,781,2201,-4,-3,652,21001,0,0,-1,1208,-1,-4,570,1005,570,709,1208,-1,-5,570,1005,570,734,1207,-1,0,570,1005,570,759,1206,-1,774,1001,578,562,684,1,0,576,576,1001,578,566,692,1,0,577,577,21101,702,0,0,1106,0,786,21201,-1,-1,-1,1106,0,676,1001,578,1,578,1008,578,4,570,1006,570,724,1001,578,-4,578,21101,0,731,0,1106,0,786,1105,1,774,1001,578,-1,578,1008,578,-1,570,1006,570,749,1001,578,4,578,21102,756,1,0,1106,0,786,1106,0,774,21202,-1,-11,1,22101,1182,1,1,21102,1,774,0,1106,0,622,21201,-3,1,-3,1105,1,640,109,-5,2105,1,0,109,7,1005,575,802,20101,0,576,-6,21002,577,1,-5,1106,0,814,21102,0,1,-1,21102,0,1,-5,21102,1,0,-6,20208,-6,576,-2,208,-5,577,570,22002,570,-2,-2,21202,-5,85,-3,22201,-6,-3,-3,22101,1505,-3,-3,1201,-3,0,843,1005,0,863,21202,-2,42,-4,22101,46,-4,-4,1206,-2,924,21101,0,1,-1,1105,1,924,1205,-2,873,21101,0,35,-4,1105,1,924,2101,0,-3,878,1008,0,1,570,1006,570,916,1001,374,1,374,2102,1,-3,895,1102,1,2,0,2101,0,-3,902,1001,438,0,438,2202,-6,-5,570,1,570,374,570,1,570,438,438,1001,578,558,922,20101,0,0,-4,1006,575,959,204,-4,22101,1,-6,-6,1208,-6,85,570,1006,570,814,104,10,22101,1,-5,-5,1208,-5,61,570,1006,570,810,104,10,1206,-1,974,99,1206,-1,974,1101,0,1,575,21102,973,1,0,1105,1,786,99,109,-7,2106,0,0,109,6,21101,0,0,-4,21102,0,1,-3,203,-2,22101,1,-3,-3,21208,-2,82,-1,1205,-1,1030,21208,-2,76,-1,1205,-1,1037,21207,-2,48,-1,1205,-1,1124,22107,57,-2,-1,1205,-1,1124,21201,-2,-48,-2,1106,0,1041,21101,0,-4,-2,1105,1,1041,21101,0,-5,-2,21201,-4,1,-4,21207,-4,11,-1,1206,-1,1138,2201,-5,-4,1059,2101,0,-2,0,203,-2,22101,1,-3,-3,21207,-2,48,-1,1205,-1,1107,22107,57,-2,-1,1205,-1,1107,21201,-2,-48,-2,2201,-5,-4,1090,20102,10,0,-1,22201,-2,-1,-2,2201,-5,-4,1103,1202,-2,1,0,1105,1,1060,21208,-2,10,-1,1205,-1,1162,21208,-2,44,-1,1206,-1,1131,1106,0,989,21101,0,439,1,1106,0,1150,21102,477,1,1,1106,0,1150,21101,0,514,1,21101,1149,0,0,1106,0,579,99,21101,0,1157,0,1105,1,579,204,-2,104,10,99,21207,-3,22,-1,1206,-1,1138,1202,-5,1,1176,1202,-4,1,0,109,-6,2106,0,0,46,7,78,1,84,1,84,1,84,1,84,1,80,13,72,1,3,1,7,1,72,1,3,1,7,1,9,11,52,1,3,1,7,1,9,1,9,1,52,1,3,1,7,1,9,1,9,1,52,1,3,1,7,1,9,1,9,1,44,13,7,1,9,1,9,1,44,1,7,1,11,1,9,1,9,1,44,1,7,1,11,1,9,1,9,1,44,1,7,1,11,1,9,1,9,1,42,11,11,1,9,1,9,1,42,1,1,1,19,1,9,1,9,1,42,1,1,1,19,11,9,11,32,1,1,1,82,1,1,1,82,1,1,1,82,1,1,1,82,1,1,1,72,13,72,1,9,1,74,1,9,11,64,1,19,1,64,1,19,1,64,1,19,1,64,1,19,1,64,1,19,1,64,1,19,1,64,1,19,1,64,11,9,1,74,1,9,1,72,13,72,1,1,1,82,1,1,1,82,1,1,1,82,1,1,1,82,1,1,1,52,11,19,1,1,1,52,1,9,1,19,1,1,1,52,1,9,1,11,11,52,1,9,1,11,1,7,1,54,1,9,1,11,1,7,1,54,1,9,1,11,1,7,1,54,13,5,13,64,1,1,1,5,1,3,1,72,1,1,1,5,1,3,1,72,1,1,1,5,1,3,1,72,1,1,1,5,1,3,1,72,1,1,1,5,1,3,1,72,13,74,1,5,1,78,1,5,1,78,1,5,1,78,1,5,1,78,1,5,1,78,7,66

// 	// time.Sleep(1 * time.Second)

// 	visits = append(visits, pos)
// 	minDis := 100000000000000000
// 	minPos := Pos{0, 0}

// 	for i := 4; i >= 1; i-- {
// 		newPos := move(pos, i)

// 		if visited(visits, newPos) {
// 			continue
// 		}

// 		dis := 0
// 		newDirections := append(directions, i)

// 		// log.Println(newDirections)

// 		switch check(newDirections) {
// 		case 0:
// 			mark(newPos, 0)

// 			// log.Println("wall")
// 			continue
// 		case 1:
// 			mark(newPos, 1)

// 			// log.Println("empty")
// 			dis, oxygenPos := findOxygen(newPos, visits, newDirections)

// 			if dis < minDis {
// 				minDis = dis
// 				minPos = oxygenPos
// 			}
// 		case 2:
// 			mark(newPos, 2)

// 			// log.Println("oxygen")
// 			dis = len(newDirections)

// 			if dis < minDis {
// 				minDis = dis
// 				minPos = newPos
// 			}
// 		}
// 	}

// 	return minDis, minPos
// }

// func isEmpty(pos Pos) bool {
// 	return m[size/2+pos.Y][size/2+pos.X] == 1
// }

// func draw() {
// 	for i := 0; i < size; i++ {
// 		for j := 0; j < size; j++ {
// 			switch m[i][j] {
// 			case 0:
// 				fmt.Print("#")
// 			case 1:
// 				fmt.Print(".")
// 			case 2:
// 				fmt.Print("O")
// 			}
// 		}

// 		fmt.Println()
// 	}

// }

// func fillWithOxygen(queue []Pos) int {
// }

func getMap() [][]byte {
	code := []int{1, 330, 331, 332, 109, 6690, 1102, 1, 1182, 16, 1102, 1, 1505, 24, 102, 1, 0, 570, 1006, 570, 36, 1002, 571, 1, 0, 1001, 570, -1, 570, 1001, 24, 1, 24, 1106, 0, 18, 1008, 571, 0, 571, 1001, 16, 1, 16, 1008, 16, 1505, 570, 1006, 570, 14, 21102, 58, 1, 0, 1105, 1, 786, 1006, 332, 62, 99, 21101, 333, 0, 1, 21102, 73, 1, 0, 1105, 1, 579, 1102, 0, 1, 572, 1101, 0, 0, 573, 3, 574, 101, 1, 573, 573, 1007, 574, 65, 570, 1005, 570, 151, 107, 67, 574, 570, 1005, 570, 151, 1001, 574, -64, 574, 1002, 574, -1, 574, 1001, 572, 1, 572, 1007, 572, 11, 570, 1006, 570, 165, 101, 1182, 572, 127, 1002, 574, 1, 0, 3, 574, 101, 1, 573, 573, 1008, 574, 10, 570, 1005, 570, 189, 1008, 574, 44, 570, 1006, 570, 158, 1106, 0, 81, 21101, 340, 0, 1, 1106, 0, 177, 21102, 1, 477, 1, 1106, 0, 177, 21101, 0, 514, 1, 21102, 1, 176, 0, 1106, 0, 579, 99, 21101, 0, 184, 0, 1105, 1, 579, 4, 574, 104, 10, 99, 1007, 573, 22, 570, 1006, 570, 165, 1001, 572, 0, 1182, 21101, 375, 0, 1, 21102, 211, 1, 0, 1106, 0, 579, 21101, 1182, 11, 1, 21101, 222, 0, 0, 1105, 1, 979, 21101, 388, 0, 1, 21101, 0, 233, 0, 1105, 1, 579, 21101, 1182, 22, 1, 21102, 1, 244, 0, 1105, 1, 979, 21101, 401, 0, 1, 21101, 255, 0, 0, 1105, 1, 579, 21101, 1182, 33, 1, 21101, 0, 266, 0, 1105, 1, 979, 21101, 0, 414, 1, 21101, 277, 0, 0, 1106, 0, 579, 3, 575, 1008, 575, 89, 570, 1008, 575, 121, 575, 1, 575, 570, 575, 3, 574, 1008, 574, 10, 570, 1006, 570, 291, 104, 10, 21101, 1182, 0, 1, 21102, 1, 313, 0, 1106, 0, 622, 1005, 575, 327, 1101, 0, 1, 575, 21101, 327, 0, 0, 1106, 0, 786, 4, 438, 99, 0, 1, 1, 6, 77, 97, 105, 110, 58, 10, 33, 10, 69, 120, 112, 101, 99, 116, 101, 100, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 110, 97, 109, 101, 32, 98, 117, 116, 32, 103, 111, 116, 58, 32, 0, 12, 70, 117, 110, 99, 116, 105, 111, 110, 32, 65, 58, 10, 12, 70, 117, 110, 99, 116, 105, 111, 110, 32, 66, 58, 10, 12, 70, 117, 110, 99, 116, 105, 111, 110, 32, 67, 58, 10, 23, 67, 111, 110, 116, 105, 110, 117, 111, 117, 115, 32, 118, 105, 100, 101, 111, 32, 102, 101, 101, 100, 63, 10, 0, 37, 10, 69, 120, 112, 101, 99, 116, 101, 100, 32, 82, 44, 32, 76, 44, 32, 111, 114, 32, 100, 105, 115, 116, 97, 110, 99, 101, 32, 98, 117, 116, 32, 103, 111, 116, 58, 32, 36, 10, 69, 120, 112, 101, 99, 116, 101, 100, 32, 99, 111, 109, 109, 97, 32, 111, 114, 32, 110, 101, 119, 108, 105, 110, 101, 32, 98, 117, 116, 32, 103, 111, 116, 58, 32, 43, 10, 68, 101, 102, 105, 110, 105, 116, 105, 111, 110, 115, 32, 109, 97, 121, 32, 98, 101, 32, 97, 116, 32, 109, 111, 115, 116, 32, 50, 48, 32, 99, 104, 97, 114, 97, 99, 116, 101, 114, 115, 33, 10, 94, 62, 118, 60, 0, 1, 0, -1, -1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 84, 18, 0, 109, 4, 2101, 0, -3, 587, 20102, 1, 0, -1, 22101, 1, -3, -3, 21102, 1, 0, -2, 2208, -2, -1, 570, 1005, 570, 617, 2201, -3, -2, 609, 4, 0, 21201, -2, 1, -2, 1106, 0, 597, 109, -4, 2106, 0, 0, 109, 5, 2102, 1, -4, 629, 21001, 0, 0, -2, 22101, 1, -4, -4, 21102, 1, 0, -3, 2208, -3, -2, 570, 1005, 570, 781, 2201, -4, -3, 652, 21001, 0, 0, -1, 1208, -1, -4, 570, 1005, 570, 709, 1208, -1, -5, 570, 1005, 570, 734, 1207, -1, 0, 570, 1005, 570, 759, 1206, -1, 774, 1001, 578, 562, 684, 1, 0, 576, 576, 1001, 578, 566, 692, 1, 0, 577, 577, 21101, 702, 0, 0, 1106, 0, 786, 21201, -1, -1, -1, 1106, 0, 676, 1001, 578, 1, 578, 1008, 578, 4, 570, 1006, 570, 724, 1001, 578, -4, 578, 21101, 0, 731, 0, 1106, 0, 786, 1105, 1, 774, 1001, 578, -1, 578, 1008, 578, -1, 570, 1006, 570, 749, 1001, 578, 4, 578, 21102, 756, 1, 0, 1106, 0, 786, 1106, 0, 774, 21202, -1, -11, 1, 22101, 1182, 1, 1, 21102, 1, 774, 0, 1106, 0, 622, 21201, -3, 1, -3, 1105, 1, 640, 109, -5, 2105, 1, 0, 109, 7, 1005, 575, 802, 20101, 0, 576, -6, 21002, 577, 1, -5, 1106, 0, 814, 21102, 0, 1, -1, 21102, 0, 1, -5, 21102, 1, 0, -6, 20208, -6, 576, -2, 208, -5, 577, 570, 22002, 570, -2, -2, 21202, -5, 85, -3, 22201, -6, -3, -3, 22101, 1505, -3, -3, 1201, -3, 0, 843, 1005, 0, 863, 21202, -2, 42, -4, 22101, 46, -4, -4, 1206, -2, 924, 21101, 0, 1, -1, 1105, 1, 924, 1205, -2, 873, 21101, 0, 35, -4, 1105, 1, 924, 2101, 0, -3, 878, 1008, 0, 1, 570, 1006, 570, 916, 1001, 374, 1, 374, 2102, 1, -3, 895, 1102, 1, 2, 0, 2101, 0, -3, 902, 1001, 438, 0, 438, 2202, -6, -5, 570, 1, 570, 374, 570, 1, 570, 438, 438, 1001, 578, 558, 922, 20101, 0, 0, -4, 1006, 575, 959, 204, -4, 22101, 1, -6, -6, 1208, -6, 85, 570, 1006, 570, 814, 104, 10, 22101, 1, -5, -5, 1208, -5, 61, 570, 1006, 570, 810, 104, 10, 1206, -1, 974, 99, 1206, -1, 974, 1101, 0, 1, 575, 21102, 973, 1, 0, 1105, 1, 786, 99, 109, -7, 2106, 0, 0, 109, 6, 21101, 0, 0, -4, 21102, 0, 1, -3, 203, -2, 22101, 1, -3, -3, 21208, -2, 82, -1, 1205, -1, 1030, 21208, -2, 76, -1, 1205, -1, 1037, 21207, -2, 48, -1, 1205, -1, 1124, 22107, 57, -2, -1, 1205, -1, 1124, 21201, -2, -48, -2, 1106, 0, 1041, 21101, 0, -4, -2, 1105, 1, 1041, 21101, 0, -5, -2, 21201, -4, 1, -4, 21207, -4, 11, -1, 1206, -1, 1138, 2201, -5, -4, 1059, 2101, 0, -2, 0, 203, -2, 22101, 1, -3, -3, 21207, -2, 48, -1, 1205, -1, 1107, 22107, 57, -2, -1, 1205, -1, 1107, 21201, -2, -48, -2, 2201, -5, -4, 1090, 20102, 10, 0, -1, 22201, -2, -1, -2, 2201, -5, -4, 1103, 1202, -2, 1, 0, 1105, 1, 1060, 21208, -2, 10, -1, 1205, -1, 1162, 21208, -2, 44, -1, 1206, -1, 1131, 1106, 0, 989, 21101, 0, 439, 1, 1106, 0, 1150, 21102, 477, 1, 1, 1106, 0, 1150, 21101, 0, 514, 1, 21101, 1149, 0, 0, 1106, 0, 579, 99, 21101, 0, 1157, 0, 1105, 1, 579, 204, -2, 104, 10, 99, 21207, -3, 22, -1, 1206, -1, 1138, 1202, -5, 1, 1176, 1202, -4, 1, 0, 109, -6, 2106, 0, 0, 46, 7, 78, 1, 84, 1, 84, 1, 84, 1, 84, 1, 80, 13, 72, 1, 3, 1, 7, 1, 72, 1, 3, 1, 7, 1, 9, 11, 52, 1, 3, 1, 7, 1, 9, 1, 9, 1, 52, 1, 3, 1, 7, 1, 9, 1, 9, 1, 52, 1, 3, 1, 7, 1, 9, 1, 9, 1, 44, 13, 7, 1, 9, 1, 9, 1, 44, 1, 7, 1, 11, 1, 9, 1, 9, 1, 44, 1, 7, 1, 11, 1, 9, 1, 9, 1, 44, 1, 7, 1, 11, 1, 9, 1, 9, 1, 42, 11, 11, 1, 9, 1, 9, 1, 42, 1, 1, 1, 19, 1, 9, 1, 9, 1, 42, 1, 1, 1, 19, 11, 9, 11, 32, 1, 1, 1, 82, 1, 1, 1, 82, 1, 1, 1, 82, 1, 1, 1, 82, 1, 1, 1, 72, 13, 72, 1, 9, 1, 74, 1, 9, 11, 64, 1, 19, 1, 64, 1, 19, 1, 64, 1, 19, 1, 64, 1, 19, 1, 64, 1, 19, 1, 64, 1, 19, 1, 64, 1, 19, 1, 64, 11, 9, 1, 74, 1, 9, 1, 72, 13, 72, 1, 1, 1, 82, 1, 1, 1, 82, 1, 1, 1, 82, 1, 1, 1, 82, 1, 1, 1, 52, 11, 19, 1, 1, 1, 52, 1, 9, 1, 19, 1, 1, 1, 52, 1, 9, 1, 11, 11, 52, 1, 9, 1, 11, 1, 7, 1, 54, 1, 9, 1, 11, 1, 7, 1, 54, 1, 9, 1, 11, 1, 7, 1, 54, 13, 5, 13, 64, 1, 1, 1, 5, 1, 3, 1, 72, 1, 1, 1, 5, 1, 3, 1, 72, 1, 1, 1, 5, 1, 3, 1, 72, 1, 1, 1, 5, 1, 3, 1, 72, 1, 1, 1, 5, 1, 3, 1, 72, 13, 74, 1, 5, 1, 78, 1, 5, 1, 78, 1, 5, 1, 78, 1, 5, 1, 78, 1, 5, 1, 78, 7, 66}
	p := NewProcess(code, []int{})

	p.Run()

	result := []byte{}

	for _, b := range p.output {
		result = append(result, byte(b))
	}

	strs := strings.Split(string(result[:len(result)-2]), "\n")

	res := [][]byte{}

	for _, line := range strs {
		row := []byte{}

		for _, c := range line {
			row = append(row, byte(c))
		}

		res = append(res, row)
	}

	return res
}

func draw(m [][]byte) {
	for i := 0; i < len(m); i++ {
		fmt.Print("->  ")

		for j := 0; j < len(m[i]); j++ {
			fmt.Print(string(m[i][j]))
		}

		fmt.Println()
	}
}

func findRobot(m [][]byte) (Pos, Pos) {
	for i := 0; i < len(m); i++ {
		for j := 0; j < len(m[i]); j++ {
			if m[i][j] == '^' {
				return Pos{X: j, Y: i}, Pos{X: 0, Y: -1}
			}

			if m[i][j] == 'v' {
				return Pos{X: j, Y: i}, Pos{X: 0, Y: 1}
			}

			if m[i][j] == '<' {
				return Pos{X: j, Y: i}, Pos{X: -1, Y: 0}
			}

			if m[i][j] == '>' {
				return Pos{X: j, Y: i}, Pos{X: 1, Y: 0}
			}
		}
	}

	panic("robot is not found")
}

func isScaffold(pos Pos, m [][]byte) bool {
	if pos.Y >= len(m) {
		return false
	}

	if pos.X >= len(m[0]) {
		return false
	}

	if pos.X < 0 {
		return false
	}

	if pos.Y < 0 {
		return false
	}

	return m[pos.Y][pos.X] == '#' || m[pos.Y][pos.X] == '@'
}

func right(dir Pos) Pos {
	return Pos{X: -dir.Y, Y: dir.X}
}

func left(dir Pos) Pos {
	return Pos{X: dir.Y, Y: -dir.X}
}

func add(p1, p2 Pos) Pos {
	return Pos{X: p1.X + p2.X, Y: p1.Y + p2.Y}
}

func path(pos Pos, dir Pos, m [][]byte) string {
	name := "not-found"
	newDir := Pos{}

	if isScaffold(add(pos, left(dir)), m) {
		name = "L"
		newDir = left(dir)
	}

	if isScaffold(add(pos, right(dir)), m) {
		name = "R"
		newDir = right(dir)
	}

	if name == "not-found" {
		return ""
	}

	dis := 0

	newPos := Pos{}

	for p := add(pos, newDir); isScaffold(p, m); p = add(p, newDir) {
		m[p.Y][p.X] = '@'
		dis++
		newPos = p
	}

	rest := path(newPos, newDir, m)

	draw(m)

	if rest != "" {
		return fmt.Sprintf("%s:%d,%s", name, dis, rest)
	} else {
		return fmt.Sprintf("%s:%d", name, dis)
	}
}

func readOutput(p *Process) string {
	result := []byte{}

	for _, b := range p.output {
		result = append(result, byte(b))
	}

	return string(result)
}

func inputString(str string, p *Process) {
	fmt.Println("Entering: ", str)
	for _, b := range str {
		p.AddInput(int(b))
	}

	p.AddInput(int('\n'))
}

func runRobot(main, a, b, c string) int {
	if len(main) > 20 {
		panic("Main can't be longer than 20")
	}

	if len(a) > 20 {
		panic("A can't be longer than 20")
	}

	if len(b) > 20 {
		panic("B can't be longer than 20")
	}

	if len(c) > 20 {
		panic("C can't be longer than 20")
	}

	code := []int{2, 330, 331, 332, 109, 6690, 1102, 1, 1182, 16, 1102, 1, 1505, 24, 102, 1, 0, 570, 1006, 570, 36, 1002, 571, 1, 0, 1001, 570, -1, 570, 1001, 24, 1, 24, 1106, 0, 18, 1008, 571, 0, 571, 1001, 16, 1, 16, 1008, 16, 1505, 570, 1006, 570, 14, 21102, 58, 1, 0, 1105, 1, 786, 1006, 332, 62, 99, 21101, 333, 0, 1, 21102, 73, 1, 0, 1105, 1, 579, 1102, 0, 1, 572, 1101, 0, 0, 573, 3, 574, 101, 1, 573, 573, 1007, 574, 65, 570, 1005, 570, 151, 107, 67, 574, 570, 1005, 570, 151, 1001, 574, -64, 574, 1002, 574, -1, 574, 1001, 572, 1, 572, 1007, 572, 11, 570, 1006, 570, 165, 101, 1182, 572, 127, 1002, 574, 1, 0, 3, 574, 101, 1, 573, 573, 1008, 574, 10, 570, 1005, 570, 189, 1008, 574, 44, 570, 1006, 570, 158, 1106, 0, 81, 21101, 340, 0, 1, 1106, 0, 177, 21102, 1, 477, 1, 1106, 0, 177, 21101, 0, 514, 1, 21102, 1, 176, 0, 1106, 0, 579, 99, 21101, 0, 184, 0, 1105, 1, 579, 4, 574, 104, 10, 99, 1007, 573, 22, 570, 1006, 570, 165, 1001, 572, 0, 1182, 21101, 375, 0, 1, 21102, 211, 1, 0, 1106, 0, 579, 21101, 1182, 11, 1, 21101, 222, 0, 0, 1105, 1, 979, 21101, 388, 0, 1, 21101, 0, 233, 0, 1105, 1, 579, 21101, 1182, 22, 1, 21102, 1, 244, 0, 1105, 1, 979, 21101, 401, 0, 1, 21101, 255, 0, 0, 1105, 1, 579, 21101, 1182, 33, 1, 21101, 0, 266, 0, 1105, 1, 979, 21101, 0, 414, 1, 21101, 277, 0, 0, 1106, 0, 579, 3, 575, 1008, 575, 89, 570, 1008, 575, 121, 575, 1, 575, 570, 575, 3, 574, 1008, 574, 10, 570, 1006, 570, 291, 104, 10, 21101, 1182, 0, 1, 21102, 1, 313, 0, 1106, 0, 622, 1005, 575, 327, 1101, 0, 1, 575, 21101, 327, 0, 0, 1106, 0, 786, 4, 438, 99, 0, 1, 1, 6, 77, 97, 105, 110, 58, 10, 33, 10, 69, 120, 112, 101, 99, 116, 101, 100, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 110, 97, 109, 101, 32, 98, 117, 116, 32, 103, 111, 116, 58, 32, 0, 12, 70, 117, 110, 99, 116, 105, 111, 110, 32, 65, 58, 10, 12, 70, 117, 110, 99, 116, 105, 111, 110, 32, 66, 58, 10, 12, 70, 117, 110, 99, 116, 105, 111, 110, 32, 67, 58, 10, 23, 67, 111, 110, 116, 105, 110, 117, 111, 117, 115, 32, 118, 105, 100, 101, 111, 32, 102, 101, 101, 100, 63, 10, 0, 37, 10, 69, 120, 112, 101, 99, 116, 101, 100, 32, 82, 44, 32, 76, 44, 32, 111, 114, 32, 100, 105, 115, 116, 97, 110, 99, 101, 32, 98, 117, 116, 32, 103, 111, 116, 58, 32, 36, 10, 69, 120, 112, 101, 99, 116, 101, 100, 32, 99, 111, 109, 109, 97, 32, 111, 114, 32, 110, 101, 119, 108, 105, 110, 101, 32, 98, 117, 116, 32, 103, 111, 116, 58, 32, 43, 10, 68, 101, 102, 105, 110, 105, 116, 105, 111, 110, 115, 32, 109, 97, 121, 32, 98, 101, 32, 97, 116, 32, 109, 111, 115, 116, 32, 50, 48, 32, 99, 104, 97, 114, 97, 99, 116, 101, 114, 115, 33, 10, 94, 62, 118, 60, 0, 1, 0, -1, -1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 84, 18, 0, 109, 4, 2101, 0, -3, 587, 20102, 1, 0, -1, 22101, 1, -3, -3, 21102, 1, 0, -2, 2208, -2, -1, 570, 1005, 570, 617, 2201, -3, -2, 609, 4, 0, 21201, -2, 1, -2, 1106, 0, 597, 109, -4, 2106, 0, 0, 109, 5, 2102, 1, -4, 629, 21001, 0, 0, -2, 22101, 1, -4, -4, 21102, 1, 0, -3, 2208, -3, -2, 570, 1005, 570, 781, 2201, -4, -3, 652, 21001, 0, 0, -1, 1208, -1, -4, 570, 1005, 570, 709, 1208, -1, -5, 570, 1005, 570, 734, 1207, -1, 0, 570, 1005, 570, 759, 1206, -1, 774, 1001, 578, 562, 684, 1, 0, 576, 576, 1001, 578, 566, 692, 1, 0, 577, 577, 21101, 702, 0, 0, 1106, 0, 786, 21201, -1, -1, -1, 1106, 0, 676, 1001, 578, 1, 578, 1008, 578, 4, 570, 1006, 570, 724, 1001, 578, -4, 578, 21101, 0, 731, 0, 1106, 0, 786, 1105, 1, 774, 1001, 578, -1, 578, 1008, 578, -1, 570, 1006, 570, 749, 1001, 578, 4, 578, 21102, 756, 1, 0, 1106, 0, 786, 1106, 0, 774, 21202, -1, -11, 1, 22101, 1182, 1, 1, 21102, 1, 774, 0, 1106, 0, 622, 21201, -3, 1, -3, 1105, 1, 640, 109, -5, 2105, 1, 0, 109, 7, 1005, 575, 802, 20101, 0, 576, -6, 21002, 577, 1, -5, 1106, 0, 814, 21102, 0, 1, -1, 21102, 0, 1, -5, 21102, 1, 0, -6, 20208, -6, 576, -2, 208, -5, 577, 570, 22002, 570, -2, -2, 21202, -5, 85, -3, 22201, -6, -3, -3, 22101, 1505, -3, -3, 1201, -3, 0, 843, 1005, 0, 863, 21202, -2, 42, -4, 22101, 46, -4, -4, 1206, -2, 924, 21101, 0, 1, -1, 1105, 1, 924, 1205, -2, 873, 21101, 0, 35, -4, 1105, 1, 924, 2101, 0, -3, 878, 1008, 0, 1, 570, 1006, 570, 916, 1001, 374, 1, 374, 2102, 1, -3, 895, 1102, 1, 2, 0, 2101, 0, -3, 902, 1001, 438, 0, 438, 2202, -6, -5, 570, 1, 570, 374, 570, 1, 570, 438, 438, 1001, 578, 558, 922, 20101, 0, 0, -4, 1006, 575, 959, 204, -4, 22101, 1, -6, -6, 1208, -6, 85, 570, 1006, 570, 814, 104, 10, 22101, 1, -5, -5, 1208, -5, 61, 570, 1006, 570, 810, 104, 10, 1206, -1, 974, 99, 1206, -1, 974, 1101, 0, 1, 575, 21102, 973, 1, 0, 1105, 1, 786, 99, 109, -7, 2106, 0, 0, 109, 6, 21101, 0, 0, -4, 21102, 0, 1, -3, 203, -2, 22101, 1, -3, -3, 21208, -2, 82, -1, 1205, -1, 1030, 21208, -2, 76, -1, 1205, -1, 1037, 21207, -2, 48, -1, 1205, -1, 1124, 22107, 57, -2, -1, 1205, -1, 1124, 21201, -2, -48, -2, 1106, 0, 1041, 21101, 0, -4, -2, 1105, 1, 1041, 21101, 0, -5, -2, 21201, -4, 1, -4, 21207, -4, 11, -1, 1206, -1, 1138, 2201, -5, -4, 1059, 2101, 0, -2, 0, 203, -2, 22101, 1, -3, -3, 21207, -2, 48, -1, 1205, -1, 1107, 22107, 57, -2, -1, 1205, -1, 1107, 21201, -2, -48, -2, 2201, -5, -4, 1090, 20102, 10, 0, -1, 22201, -2, -1, -2, 2201, -5, -4, 1103, 1202, -2, 1, 0, 1105, 1, 1060, 21208, -2, 10, -1, 1205, -1, 1162, 21208, -2, 44, -1, 1206, -1, 1131, 1106, 0, 989, 21101, 0, 439, 1, 1106, 0, 1150, 21102, 477, 1, 1, 1106, 0, 1150, 21101, 0, 514, 1, 21101, 1149, 0, 0, 1106, 0, 579, 99, 21101, 0, 1157, 0, 1105, 1, 579, 204, -2, 104, 10, 99, 21207, -3, 22, -1, 1206, -1, 1138, 1202, -5, 1, 1176, 1202, -4, 1, 0, 109, -6, 2106, 0, 0, 46, 7, 78, 1, 84, 1, 84, 1, 84, 1, 84, 1, 80, 13, 72, 1, 3, 1, 7, 1, 72, 1, 3, 1, 7, 1, 9, 11, 52, 1, 3, 1, 7, 1, 9, 1, 9, 1, 52, 1, 3, 1, 7, 1, 9, 1, 9, 1, 52, 1, 3, 1, 7, 1, 9, 1, 9, 1, 44, 13, 7, 1, 9, 1, 9, 1, 44, 1, 7, 1, 11, 1, 9, 1, 9, 1, 44, 1, 7, 1, 11, 1, 9, 1, 9, 1, 44, 1, 7, 1, 11, 1, 9, 1, 9, 1, 42, 11, 11, 1, 9, 1, 9, 1, 42, 1, 1, 1, 19, 1, 9, 1, 9, 1, 42, 1, 1, 1, 19, 11, 9, 11, 32, 1, 1, 1, 82, 1, 1, 1, 82, 1, 1, 1, 82, 1, 1, 1, 82, 1, 1, 1, 72, 13, 72, 1, 9, 1, 74, 1, 9, 11, 64, 1, 19, 1, 64, 1, 19, 1, 64, 1, 19, 1, 64, 1, 19, 1, 64, 1, 19, 1, 64, 1, 19, 1, 64, 1, 19, 1, 64, 11, 9, 1, 74, 1, 9, 1, 72, 13, 72, 1, 1, 1, 82, 1, 1, 1, 82, 1, 1, 1, 82, 1, 1, 1, 82, 1, 1, 1, 52, 11, 19, 1, 1, 1, 52, 1, 9, 1, 19, 1, 1, 1, 52, 1, 9, 1, 11, 11, 52, 1, 9, 1, 11, 1, 7, 1, 54, 1, 9, 1, 11, 1, 7, 1, 54, 1, 9, 1, 11, 1, 7, 1, 54, 13, 5, 13, 64, 1, 1, 1, 5, 1, 3, 1, 72, 1, 1, 1, 5, 1, 3, 1, 72, 1, 1, 1, 5, 1, 3, 1, 72, 1, 1, 1, 5, 1, 3, 1, 72, 1, 1, 1, 5, 1, 3, 1, 72, 13, 74, 1, 5, 1, 78, 1, 5, 1, 78, 1, 5, 1, 78, 1, 5, 1, 78, 1, 5, 1, 78, 7, 66}

	p := NewProcess(code, []int{})

	p.RunTilInterupt()
	fmt.Println(readOutput(p))
	inputString(main, p)

	p.RunTilInterupt()
	fmt.Println(readOutput(p))
	inputString(a, p)

	p.RunTilInterupt()
	fmt.Println(readOutput(p))
	inputString(b, p)

	p.RunTilInterupt()
	fmt.Println(readOutput(p))
	inputString(c, p)

	p.RunTilInterupt()
	fmt.Println(readOutput(p))
	inputString("n", p)

	p.RunTilInterupt()
	fmt.Println(readOutput(p))

	return p.output[len(p.output)-1]
}

func segment(str string, segments int) ([]string, bool) {
	if segments == 0 {
		fmt.Println(str)
		if str == "" {
			return []string{}, true
		}

		return []string{}, false
	}

	parts := strings.Split(str, ",")

	for _, elements := range []int{5, 4, 3, 2, 1} {
		seg := strings.Join(parts[0:elements], ",")

		if len(seg) > 20 {
			continue
		}

		newStr := strings.Replace(str, seg+",", "", -1)
		newStr = strings.Replace(newStr, seg, "", -1)

		result := []string{seg}

		rest, ok := segment(newStr, segments-1)

		if ok {
			return append(result, rest...), ok
		}
	}

	return []string{}, false
}

func compress(str string) (string, string, string, string) {
	segs, ok := segment(str, 3)

	if !ok {
		panic("Compression failed")
	}

	str = strings.Replace(str, segs[0], "A", -1)
	str = strings.Replace(str, segs[1], "B", -1)
	str = strings.Replace(str, segs[2], "C", -1)

	return str, segs[0], segs[1], segs[2]
}

func main() {
	m := getMap()

	draw(m)

	result := 0

	for i := 1; i < len(m)-1; i++ {
		for j := 1; j < len(m[i])-1; j++ {
			cond := m[i][j] == '#' &&
				m[i+1][j] == '#' &&
				m[i-1][j] == '#' &&
				m[i][j+1] == '#' &&
				m[i][j-1] == '#'

			if cond {
				result += i * j
			}
		}
	}

	fmt.Println(result)

	pos, dir := findRobot(m)

	fmt.Println(pos, dir)

	path := path(pos, dir, m)

	main, a, b, c := compress(path)

	fmt.Println(main, a, b, c)

	dust := runRobot(
		main,
		strings.Replace(a, ":", ",", -1),
		strings.Replace(b, ":", ",", -1),
		strings.Replace(c, ":", ",", -1),
	)

	fmt.Println("dust", dust)
}
